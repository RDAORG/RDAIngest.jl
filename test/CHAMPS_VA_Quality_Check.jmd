<!--
title : CHAMPS Verbal Autopsy Data Quality Check
author : Young
date: Aug 22nd 2023
-->

## CHAMPS Verbal Autopsy Data Quality Check
##### Yoonyoung Choi
##### Aug 22nd 2023


Using the dataset *"CHAMPS_deid_verbal_autopsy_results"*, the data quality check to discuss further process. 


<!-- NOT appeared this setup dependencies and datasetup -->
 ## Set up the dataset
 ```julia; echo=false
using Pkg
using CSV
using DataFrames
"FreqTables" âˆ‰ keys(Pkg.project().dependencies) && Pkg.add("FreqTables")
using FreqTables
filename = "champs_df2"
path = "/Users/young/Documents/GitHub/RDAIngest.jl/"
file = joinpath(path, "$filename.csv")
champs_raw = CSV.File(file; delim=',', quotechar='"', dateformat="yyyy-mm-dd", decimal='.') |> DataFrame
```


# FIR Filter Design


We'll implement lowpass, highpass and ' bandpass FIR filters. If
you want to read more about DSP I highly recommend [The Scientist
and Engineer's Guide to Digital Signal
Processing](http://www.dspguide.com/) which is freely available
online.


## Calculating frequency response


DSP.jl package doesn't (yet) have a method to calculate the
the frequency response of a FIR filter so we define it:

```julia
freqtable(champs_raw, :"Id10186")
```

## Design Lowpass FIR filter


Designing a lowpass FIR filter is very simple to do with DSP.jl, all you

```julia
freqtable(champs_raw, :"Id10193")
```

## Plot the frequency and impulse response


The next code chunk is executed in term mode, see the [script](FIR_design.jl) for syntax.

```julia; term=true
h_db = log10.(abs.(h));
ws = w/pi*(fs/2)
```
var documenterSearchIndex = {"docs":
[{"location":"RDA Documentation/#Reference-Death-Archive-(RDA)","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The Reference Death Archive (RDA) project has been specifically designed to cater to users of the Verbal Autopsy HDSS dataset. RDA's primary objective is to streamline and automate the process of ingesting Verbal Autopsy data into the core data archive while facilitating its conversion to the ICD (International Classification of Diseases) standards through the InterVA and inSilico VA systems.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"RDA is engineered using Julia code and SQLite, ensuring consistency and rapid data processing. Its versatility makes it accessible and beneficial for a wide range of Verbal Autopsy users, simplifying the otherwise complex data management tasks.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"This documentation serves as a comprehensive guide to understanding the key structures of the RDA data archive system and the relationships between key variables. For a deeper dive into the specifics of each module, you'll find more detailed information provided separately.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"RDA Ingest.jl\nRDA Clean.jl\nRDA Convert.jl","category":"page"},{"location":"RDA Documentation/#Multiple-Sources-Death-Registered-Data","page":"Reference Death Archive (RDA)","title":"Multiple Sources Death Registered Data","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The utilization of data from various geographical locations or the strategic design of multi-site studies can significantly enhance the representational accuracy of a given region. This approach leads to the establishment of an integrated Decision Support System (DSS)-sample vital registration system, serving as a cost-effective foundational data collection platform. This platform not only achieves international representativeness but also provides a detailed perspective at the regional level, enabling in-depth research investigations.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"To uphold data integrity and distinguish between individual sites, a unique identifier is assigned to each site. This identifier is consistently applied across all primary data tables within the Reference Death Archive (RDA), ensuring a clear demarcation between the primary data of different sites.","category":"page"},{"location":"RDA Documentation/#Project-Objective","page":"Reference Death Archive (RDA)","title":"Project Objective","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The primary aim of this project is to achieve the following:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Automatic Data Updates: Implement a system that automatically updates with new data sources. This will simplify the process of keeping the system up-to-date.\nStreamlined Workflow: Create a more transparent and efficient workflow. This will enhance the overall clarity and ease of operation within the system.\nSimplification of RDA Modules: Within the three key modules of RDA, namely, RDA Ingest, RDA Clean, and RDA Convert, strive to make each step more straightforward and user-friendly. This simplification will improve usability and accessibility. ","category":"page"},{"location":"RDA Documentation/#.-Data-Structure-and-Schema","page":"Reference Death Archive (RDA)","title":"1. Data Structure & Schema","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The conceptual model of the Reference Death Archive is presented in Figure 1. (Image: Fig 1: RDA Data Archiving Schema)","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"This diagram provides an overview of how different tables are interconnected within the system. In the diagram, tables are depicted as boxes, with their names placed at the upper section of each box. Field names are located in the lower section. Primary keys are indicated with \"key\" signs next to the relevant items, and relationships between tables are depicted using \"crows feet\" lines. These lines connect tables based on foreign key relationships, with the many side of the relationship represented by the crow's foot symbol. Additionally, each variable is associated with a defined data type to ensure data consistency.","category":"page"},{"location":"RDA Documentation/#The-schema-is-color-coded-based-on-its-orientation-and-sources.","page":"Reference Death Archive (RDA)","title":"The schema is color-coded based on its orientation and sources.","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"<span style=\"color:#2E86C1\"> Blue </span>: Sources and Sites\n<span style=\"color:#8E44AD \"> Purple </span>:  Site Protocals and Ethic documents\n<span style=\"color:#1E8449\"> Green </span>: Instrument documents\n<span style=\"color:pink\"> Pink </span>: Transformation\n<span style=\"color:#F8C471\"> Orange </span>: Dataset\n<span style=\"color:#EC7063\"> Salmon </span>: Death information\n<span style=\"color:lightgreen\"> Lightgreen </span>: Variables and mappings ","category":"page"},{"location":"RDA Documentation/#.-Sources","page":"Reference Death Archive (RDA)","title":"2. Sources","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The source_id in the sources table serves as the primary key, uniquely identifying each data source.\nIn the sites table, the source_id serves as a foreign key variable, establishing a link between the sources of data and the specific sites where the data originates. Additionally, site_id is designated as the primary key within the sites table.\nThese source_id and site_id identifiers serve as the foundational starting points for collecting death data and managing data ingestion events, facilitating the seamless ingestions of data into the system.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"All the relevant origin of the data is elucidated through the following tables:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Table Name Description\nsources The entity responsible for distributing the data\nsites The surveillance site whre the data collection (or death) occured","category":"page"},{"location":"RDA Documentation/#.-Data-Collection-(Protocols-and-Ethics)","page":"Reference Death Archive (RDA)","title":"3. Data Collection (Protocols & Ethics)","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Within the data architecture, the site_protocols table establishes a many-to-many relationship. This connection is achieved through the use of a protocol_id foreign key, which links to the protocols table. The protocols table, in turn, includes an ethics_id (foreign key) to establish a connection with the ethics table. Utilizing ethics_id as a foreign key variable, the documentation further details the ethics_documents table, while protocol_id serves as the foreign key variable for documenting the protocol_documents table. ","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The detailed information pertaining to data collection protocols and ethical approvals is documented in the following tables:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Table Name Description\nprotocols A data collection protocol\nsite_protocols Links the protocols implemented at a site\nprotocol_documents Documents describing the protocol\nethics An ethics approval for data collection\nethics_documents Documents describing the ethical approval","category":"page"},{"location":"RDA Documentation/#.-Data-collection-(Instruments)","page":"Reference Death Archive (RDA)","title":"4. Data collection (Instruments)","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The protocol_instruments table plays a pivotal role in establishing connections between protocols and instruments. It links to the instruments table using the instrument_id as a foreign key. Simultaneously, the instrument_id in the instruments table serves as the primary key. This connection extends further to the instrument_documents table and the instrument_datasets table.\nIn the instrument_documents table, the instrument_id is utilized as a foreign key.\nSimilarly, the instrument_datasets table also employs the instrument_id as a foreign key. This linkage sets the stage for future connections with datasets and variable maps, which will be elaborated upon in subsequent steps.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"An overview of the data collection instruments is provided in the following tables:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Table Name Description\ninstrument A data collection isnstrument\ninstrument_documents Documents describing the instrument, or instrument questionnaire\nprotocol_instruments The instruments covered by a particular protocol\ninstrument_datasets Datasets collected by this instrument","category":"page"},{"location":"RDA Documentation/#.-Datasets","page":"Reference Death Archive (RDA)","title":"5. Datasets","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"From the sources to data_ingestions, a connection is established through the data_ingestion_id, which is linked with the dataset_id. Additionally, the instrument_id serves as a foreign key in the datasets table, where dataset_id is the primary key.\nThe datasets table also forms relationships with datarows and dataset_variables, using dataset_id as a foreign key.\nMoving from datarows, the row_id, originally assigned as a foreign key from the Death Rows, is collected. These rows are subsequently translated into data, with the row_id serving as a foreign key.\nAdditionally, the datarows table contains a variable_id, which can be further related to variables, a topic that will be covered in the next section.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The actual data is stored and organized within the following tables:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Table Name Description\ndatasets The dataset identifier and name\ndatarows The row identifier for each row in the dataset\ndata A variable - value pair for each variable in each row of the dataset\ndataset_variables The variables representing each column in the dataset","category":"page"},{"location":"RDA Documentation/#.-Variables-and-mappings","page":"Reference Death Archive (RDA)","title":"6. Variables and mappings","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The variables table is linked to the variable_id as a foreign key from both the dataset_variables and data tables. These variables are primarily sourced from the sites providing data. Additionally, they are linked to their respective domains tables using the domain_id as a foreign key.\nBy utilizing the vocabulary_id as a foreign key, variables can be linked to vocabularies and vocabulary_items.\nThe connection extends to the variablemaps tables, originating from instruments, and variablemappings from the CDC sites/standardized variables. These mappings allow for the conversion of variable mappings to variables using destination_id, from_id, and prerequisite_id to reference the variable ID.\nMoreover, variables employ a value_type_id as a foreign link to the value_types table. This relationship provides insight into the value type of each variable, maintaining consistency with data types.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"The tables that describe the variables representing the data within the dataset are as follows:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Table Name Description\ndomains Variable names are unique within a domain\nvariables Documents a variable\nvalue_types Representing the different datatypes, variables can assume\nvocabularies The values a categorical variables can assume, are contained in a vocabulary\nvocabulary_items The individual categories (codes) in a vocabulary\nvocabulary_mapping The items of one vocabulary can be mapped to another vocabulary","category":"page"},{"location":"RDA Documentation/#.-Transformations","page":"Reference Death Archive (RDA)","title":"7. Transformations","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"During the data ingestion process, transformations and their corresponding transformation_id and ingest_id are established. These transformations are directly linked to the dataset_id in the Datasets table.\nThe transformation_id interacts with both the transformation_inputs and transformation_outputs tables, both of which are connected to the dataset_id. However, the data for these interactions is sourced from the transformations table, where the transformation_id serves as a foreign key.","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"An instance of data ingestion into the Reference Death Archive is detailed through the following tables:","category":"page"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"Table Name Description\ndata_ingestions Records the data ingest instances\ntransformations Documents the data transformation (extraction, transformation and loading)\ntransformation_types Whether the transformation operates on raw (data ingest) or existing datasets\ntransformation_statuses Whether the transformation has been verfied or not\ningest_datasets The datasets containing the raw data from the data ingest\ntransformation_inputs The dataset/s consumed by the transformation for a dataset transformation\ntransformation_outputs The dataset/s produced by the transformation","category":"page"},{"location":"RDA Documentation/#Conclusion","page":"Reference Death Archive (RDA)","title":"Conclusion","text":"","category":"section"},{"location":"RDA Documentation/","page":"Reference Death Archive (RDA)","title":"Reference Death Archive (RDA)","text":"In conclusion, this documentation serves as an essential reference for understanding the Reference Death Archive (RDA). It provides a clear overview of the system's structure, including data sources, collection protocols, instruments, datasets, variables, mappings, and transformations. With this foundational knowledge, users and developers can efficiently navigate and utilize the RDA for diverse research and analytical purposes, ensuring its continued effectiveness as a valuable data management platform.","category":"page"},{"location":"introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This package creates and ingest data for the Reference Death Archive into an SQLite or SQL Server database.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Database creation is done using the createdatabase function. Set sqlite=false to create a SQL Server database.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Data ingestion is specific to a source, where a source is an entity that distributes/shares data related to a death, for example, verbal autopsy or assigned cause of death data.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The current version of RDAIngest.jl can ingest the Level 2: De-identified data distributed by CHAMPS and COMSA.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"See the ingest_source function.","category":"page"},{"location":"introduction/#Database-Structure","page":"Introduction","title":"Database Structure","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The conceptual model of the Reference Death Archive is shown in Figure 1. (Image: Fig 1: RDA Conceptual Model)","category":"page"},{"location":"introduction/#Data-sources","page":"Introduction","title":"Data sources","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The origin of the data is described in the following tables:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Table Name Description\nsources The entity responsible for distributing the data\nsites The surveillance site whre the data collection (or death) occured","category":"page"},{"location":"introduction/#Data-collection","page":"Introduction","title":"Data collection","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The data collection protocol and ethical approval are described in the following tables:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Table Name Description\nprotocols A data collection protocol\nsite_protocols Links the protocols implemented at a site\nprotocol_documents Documents describing the protocol\nethics An ethics approval for data collection\nethics_documents Documents describing the ethical approval","category":"page"},{"location":"introduction/#Data-collection-instruments","page":"Introduction","title":"Data collection instruments","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The data collection instruments are described in the following tables:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Table Name Description\ninstrument A data collection isnstrument\ninstrument_documents Documents describing the instrument, or instrument questionnaire\nprotocol_instruments The instruments covered by a particular protocol\ninstrument_datasets Datasets collected by this instrument","category":"page"},{"location":"introduction/#Data-ingest","page":"Introduction","title":"Data ingest","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"An instance of a data ingest into the Reference Death Archive is described by the following tables:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Table Name Description\ndata_ingestions Records the data ingest instances\ntransformations Documents the data transformation (extraction, transformation and loading)\ntransformation_types Whether the transformation operates on raw (data ingest) or existing datasets\ntransformation_statuses Whether the transformation has been verfied or not\ningest_datasets The datasets containing the raw data from the data ingest\ntransformation_inputs The dataset/s consumed by the transformation for a dataset transformation\ntransformation_outputs The dataset/s produced by the transformation","category":"page"},{"location":"introduction/#Data","page":"Introduction","title":"Data","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The data itself is contained in the following tables:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Table Name Description\ndatasets The dataset identifier and name\ndatarows The row identifier for each row in the dataset\ndata A variable - value pair for each variable in each row of the dataset\ndataset_variables The variables representing each column in the dataset","category":"page"},{"location":"introduction/#Variables","page":"Introduction","title":"Variables","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The variables representing the data contained in the dataset, is described by the following tables:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Table Name Description\ndomains Variable names are unique within a domain\nvariables Documents a variable\nvalue_types Representing the different datatypes, variables can assume\nvocabularies The values a categorical variables can assume, are contained in a vocabulary\nvocabulary_items The individual categories (codes) in a vocabulary\nvocabulary_mapping The items of one vocabulary can be mapped to another vocabulary","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"In the case of the CHAMPS data, the data dictionaries are manually extracted from the data distribution document and saved as csv files in the RDA repository. The format of the file is (the field separator is a semi-colon):","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Column_Name: The variable name\nKey : Yes if the variable is a key to the data\nDescription: The description of the variable, if the description contains more than one line, in the case of a categorical variable, the vocabulary appears from line two onwards as comma separated text containing code and description.\nNote: A note regarding the variable\nDataType: The variable type\nRDA_TYPE_INTEGER = 1\nRDA_TYPE_FLOAT = 2\nRDA_TYPE_STRING = 3\nRDA_TYPE_DATE = 4\nRDA_TYPE_DATETIME = 5\nRDA_TYPE_TIME = 6\nRDA_TYPE_CATEGORY = 7","category":"page"},{"location":"","page":"Functions","title":"Functions","text":"CurrentModule = RDAIngest","category":"page"},{"location":"#RDAIngest","page":"Functions","title":"RDAIngest","text":"","category":"section"},{"location":"","page":"Functions","title":"Functions","text":"Documentation for RDAIngest.","category":"page"},{"location":"#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"","page":"Functions","title":"Functions","text":"Modules = [RDAIngest]","category":"page"},{"location":"#RDAIngest.AbstractSource","page":"Functions","title":"RDAIngest.AbstractSource","text":"Provide a source struct for source specific information\n\n\n\n\n\n","category":"type"},{"location":"#RDAIngest.CHAMPSSource","page":"Functions","title":"RDAIngest.CHAMPSSource","text":"Provide CHAMPS specific information\n\n\n\n\n\n","category":"type"},{"location":"#RDAIngest.COMSASource","page":"Functions","title":"RDAIngest.COMSASource","text":"Provide COMSA Mozambique specific information\n\n\n\n\n\n","category":"type"},{"location":"#RDAIngest.HEALSLSource","page":"Functions","title":"RDAIngest.HEALSLSource","text":"Provide COMSA Sierra Leone (HEALSL) specific information\n\n\n\n\n\n","category":"type"},{"location":"#RDAIngest.Ingest","page":"Functions","title":"RDAIngest.Ingest","text":"Provide ingest specific information\n\n\n\n\n\n","category":"type"},{"location":"#RDAIngest.add_data_column-Tuple{ODBC.Connection, Any, Any, Any}","page":"Functions","title":"RDAIngest.add_data_column","text":"add_data_column(db::ODBC.Connection, variable_id, value_type, coldata)\n\nInsert data for a column of the source dataset\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_data_column-Tuple{SQLite.DB, Any, Any, Any}","page":"Functions","title":"RDAIngest.add_data_column","text":"add_data_column(db::SQLite.DB, variable_id, coldata)\n\nInsert data for a column of the source dataset\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_datarows-Tuple{DBInterface.Connection, Integer, Integer}","page":"Functions","title":"RDAIngest.add_datarows","text":"add_datarows(db::SQLite.DB, nrow::Integer, dataset_id::Integer)\n\nDefine data rows in the datarows table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_domain","page":"Functions","title":"RDAIngest.add_domain","text":"add_domain(db::DBInterface.Connection, domain_name::String, domain_description::String)\n\nAdd domain to the domain table if not exist, and returns the domain id\n\n\n\n\n\n","category":"function"},{"location":"#RDAIngest.add_ethics-Tuple{AbstractSource, DBInterface.Connection, String}","page":"Functions","title":"RDAIngest.add_ethics","text":"add_ethics(source::AbstractSource, db::DBInterface.Connection, datapath::String)\n\nEthics document, committee and reference need to be in matching order\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_instruments-Tuple{AbstractSource, Any, String}","page":"Functions","title":"RDAIngest.add_instruments","text":"add_instruments(source::AbstractSource, db::SQLite.DB, datapath::String)\n\nAdd survey instruments\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_protocols-Tuple{AbstractSource, Any, String}","page":"Functions","title":"RDAIngest.add_protocols","text":"add_protocols(source::AbstractSource, db::SQLite.DB, datapath::String)\n\nAdd protocols Todo: how protocols link to enthics_id, need a mapping dictionary? \n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_sites-Tuple{CHAMPSSource, DBInterface.Connection, Integer, String}","page":"Functions","title":"RDAIngest.add_sites","text":"add_sites(source::CHAMPSSource, db::DBInterface.Connection, sourceid::Integer, datapath::String)\n\nAdd CHAMPS sites and country iso2 codes to sites table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_sites-Tuple{COMSASource, DBInterface.Connection, Integer, String}","page":"Functions","title":"RDAIngest.add_sites","text":"add_sites(source::COMSASource, db::DBInterface.Connection, sourceid::Integer, datapath::String)\n\nAdd COMSA sites and country iso2 codes to sites table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_sites-Tuple{HEALSLSource, DBInterface.Connection, Integer, String}","page":"Functions","title":"RDAIngest.add_sites","text":"add_sites(source::HEALSLSource, db::DBInterface.Connection, sourceid::Integer, datapath::String)\n\nAdd COMSA Sierra Leone sites (districts) and country iso2 codes to sites table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_source-Tuple{AbstractSource, DBInterface.Connection}","page":"Functions","title":"RDAIngest.add_source","text":"add_source(source::AbstractSource, db::DBInterface.Connection)\n\nAdd source name to the sources table, and returns the source_id\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_transformation-Tuple{SQLite.DB, Integer, Integer, String, String, Dates.Date, String}","page":"Functions","title":"RDAIngest.add_transformation","text":"add_transformation(db::SQLite.DB, type::Integer, status::Integer, description::String, code_reference::String, date_created::Date, created_by::String)\n\nAdd a transformation to the transformations table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_variables-Tuple{DataFrames.AbstractDataFrame, ODBC.Connection, Integer}","page":"Functions","title":"RDAIngest.add_variables","text":"add_variables(variables::AbstractDataFrame, db::ODBC.Connection, domain_id::Integer)\n\nAdd variables from a variable dataframe to variables table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_variables-Tuple{DataFrames.AbstractDataFrame, SQLite.DB, Integer}","page":"Functions","title":"RDAIngest.add_variables","text":"add_variables(variables::AbstractDataFrame, db::SQLite.DB, domain_id::Integer)\n\nAdd variables from a variable dataframe to variables table\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.add_vocabulary-Tuple{Any, Vocabulary}","page":"Functions","title":"RDAIngest.add_vocabulary","text":"add_vocabulary(db::SQLite.DB, vocabulary::Vocabulary)\n\nInsert a vocabulary and its items into a RDA database, returns the vocabulary_id of the inserted vocabulary\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdatabase-Tuple{Any, Any}","page":"Functions","title":"RDAIngest.createdatabase","text":"createdatabase(path, name; replace=false, sqlite=true)\n\nCreates a database to store the information contained in the Reference Death Archive (RDA) By default a sqlite database is created, but this can be changed by setting the sqlite argument to false,  in which case a sql server database is created and path is interpreted as the name of the database server.\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdatabasesqlite-Tuple{Any, Any}","page":"Functions","title":"RDAIngest.createdatabasesqlite","text":"createdatabasesqlite(path, name; replace=replace)::SQLite.DB\n\nCreate an sqlite database on path with name, if replace = true then replace any existing database\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdatabasesqlserver-Tuple{Any, Any}","page":"Functions","title":"RDAIngest.createdatabasesqlserver","text":"createdatabasesqlserver(server, name; replace=replace)::ODBC.Connection\n\nCreate a SQL Server database on server with name, if replace = true then replace any existing database\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdatasets-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createdatasets","text":"createdatasets(db::ODBC.Connection)\n\nCreate tables to record datasets, rows, data and links to the transformations that use/created the datasets\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdatasets-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createdatasets","text":"createdatasets(db::SQLite.DB)\n\nCreate tables to record datasets, rows, data and links to the transformations that use/created the datasets\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdeaths-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createdeaths","text":"createdeaths(db::ODBC.Connection)\n\nCreate tables to store deaths, and their association with data rows and data ingests\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createdeaths-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createdeaths","text":"createdeaths(db)\n\nCreate tables to store deaths, and their association with data rows and data ingests\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createinstruments-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createinstruments","text":"createinstruments(db::ODBC.Connection)\n\nCreate tables to record data collection instruments, and their associated protocols and datasets\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createinstruments-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createinstruments","text":"createinstruments(db::SQLite.DB)\n\nCreate tables to record data collection instruments, and their associated protocols and datasets\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createmapping-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createmapping","text":"createmapping(db::ODBC.Connection)\n\nCreate the table required for variable mapping. This table is used to map variables from one instrument to another. The table is created in the database provided as an argument. The variable mapping is based on the PyCrossVA approach.\n\nThe relationship to the PyCrossVA configuration file columns:\n\nNew Column Name = destinationid - the variableid of the new column\nNew Column Documentation = Stored in the variable table\nSource Column ID = fromid - the variableid of the source variable\nSource Column Documentation = will be in the variables table\nRelationship = operator - the operator to be used to create the new variable\nCondition = operants - the operants to be used with the operator\nPrerequisite = prerequisiteid - the variableid of the prerequisite variable\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createmapping-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createmapping","text":"createmapping(db::SQLite.DB)\n\nCreate the table required for variable mapping. This table is used to map variables from one instrument to another. The table is created in the database provided as an argument. The variable mapping is based on the PyCrossVA approach.\n\nThe relationship to the PyCrossVA configuration file columns:\n\nNew Column Name = destinationid - the variableid of the new column\nNew Column Documentation = Stored in the variable table\nSource Column ID = fromid - the variableid of the source variable\nSource Column Documentation = will be in the variables table\nRelationship = operator - the operator to be used to create the new variable\nCondition = operants - the operants to be used with the operator\nPrerequisite = prerequisiteid - the variableid of the prerequisite variable\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createprotocols-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createprotocols","text":"createprotocols(db::ODBC.Connection)\n\nCreate tables to record information about protocols and the ethics approvals for those protocols\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createprotocols-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createprotocols","text":"createprotocols(db::SQLite.DB)\n\nCreate tables to record information about protocols and the ethics approvals for those protocols\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createsources-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createsources","text":"createsources(db::ODBC.Connection)\n\nCreates tables to record a source and associated site/s for deaths contributed to the RDA\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createsources-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createsources","text":"createsources(db::SQLite.DB)\n\nCreates tables to record a source and associated site/s for deaths contributed to the RDA\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createtransformations-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createtransformations","text":"createtransformations(db::ODBC.Connection)\n\nCreate tables to record data transformations and data ingests\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createtransformations-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createtransformations","text":"createtransformations(db)\n\nCreate tables to record data transformations and data ingests\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createvariables-Tuple{ODBC.Connection}","page":"Functions","title":"RDAIngest.createvariables","text":"createvariables(db::ODBC.Connection)\n\nCreate tables to record value types, variables and vocabularies\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.createvariables-Tuple{SQLite.DB}","page":"Functions","title":"RDAIngest.createvariables","text":"createvariables(db)\n\nCreate tables to record value types, variables and vocabularies\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_column-Tuple{ODBC.Connection, Integer, Integer, String}","page":"Functions","title":"RDAIngest.dataset_column","text":"dataset_column(db::ODBC.Connection, dataset_id::Integer, variable_id::Integer, variable_name::String)::AbstractDataFrame\n\nReturn one column of data in a dataset (representing a variable)\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_column-Tuple{SQLite.DB, Integer, Integer, String}","page":"Functions","title":"RDAIngest.dataset_column","text":"dataset_column(db::SQLite.DB, dataset_id::Integer, variable_id::Integer, variable_name::String)::AbstractDataFrame\n\nReturn one column of data in a dataset (representing a variable)\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_in_ingest-Tuple{Any, Any, Any}","page":"Functions","title":"RDAIngest.dataset_in_ingest","text":"datasetiningest(db, datasetid, ingestionid)\n\nIf datasetid is part of ingestionid\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_to_arrow-Tuple{Any, Any, Any}","page":"Functions","title":"RDAIngest.dataset_to_arrow","text":"dataset_to_arrow(db, dataset, datapath)\n\nSave a dataset in the arrow format\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_to_csv","page":"Functions","title":"RDAIngest.dataset_to_csv","text":"dataset_to_csv(db, dataset_id, datapath, compress)\n\nSave a dataset in compressed csv format\n\n\n\n\n\n","category":"function"},{"location":"#RDAIngest.dataset_to_dataframe-Tuple{ODBC.Connection, Any}","page":"Functions","title":"RDAIngest.dataset_to_dataframe","text":"dataset_to_dataframe(db::ODBC.Connection, dataset)::AbstractDataFrame\n\nExtract a dataset into a DataFrame\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_to_dataframe-Tuple{SQLite.DB, Any}","page":"Functions","title":"RDAIngest.dataset_to_dataframe","text":"dataset_to_dataframe(db::SQLite.DB, dataset)::AbstractDataFrame\n\nReturn a dataset with id dataset as a DataFrame in the wide format\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_variables-Tuple{ODBC.Connection, Any}","page":"Functions","title":"RDAIngest.dataset_variables","text":"dataset_variables(db::ODBC.Connection, dataset)::AbstractDataFrame\n\nReturn the list of variables in a dataset\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.dataset_variables-Tuple{SQLite.DB, Any}","page":"Functions","title":"RDAIngest.dataset_variables","text":"dataset_variables(db::SQLite.DB, dataset)::AbstractDataFrame\n\nReturn the list of variables in a dataset\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.death_in_ingest-Tuple{Any, Any}","page":"Functions","title":"RDAIngest.death_in_ingest","text":"death_in_ingest(db, ingestion_id)\n\nIf ingested deaths are part of ingestion_id\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_datasetname-Tuple{ODBC.Connection, Any}","page":"Functions","title":"RDAIngest.get_datasetname","text":"get_datasetname(db::ODBC.Connection, dataset)\n\nGet the name of a dataset\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_datasetname-Tuple{SQLite.DB, Any}","page":"Functions","title":"RDAIngest.get_datasetname","text":"get_datasetname(db, dataset)\n\nReturn dataset name, given the dataset_id\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_domain-Tuple{DBInterface.Connection, String}","page":"Functions","title":"RDAIngest.get_domain","text":"get_domain(db::DBInterface.Connection, domain_name::String)\n\nReturn the domainid for domain named `domainname`\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_last_deathingest-Tuple{ODBC.Connection, Integer}","page":"Functions","title":"RDAIngest.get_last_deathingest","text":"get_last_deathingest(db::ODBC.Connection, source_id::Integer)\n\nGet ingestion id for latest death ingestion for source\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_last_deathingest-Tuple{SQLite.DB, Integer}","page":"Functions","title":"RDAIngest.get_last_deathingest","text":"get_last_deathingest(source)\n\nGet ingestion id for latest death ingestion for source\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_namedkey-Tuple{DBInterface.Connection, Any, Any, Any}","page":"Functions","title":"RDAIngest.get_namedkey","text":"get_namedkey(db::DBInterface.Connection, table, key, keycol)\n\nReturn the integer key from table table in column keycol (keycol must be a Symbol) for key with name key\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_source-Tuple{DBInterface.Connection, Any}","page":"Functions","title":"RDAIngest.get_source","text":"get_source(db::DBInterface.Connection, name)\n\nReturn the source_id of source name, returns missing if source doesn't exist\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_table-Tuple{ODBC.Connection, String}","page":"Functions","title":"RDAIngest.get_table","text":"get_table(db::ODBC.Connection, table::String)::AbstractDataFrame\n\nRetrieve table table as a DataFrame from db\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_table-Tuple{SQLite.DB, String}","page":"Functions","title":"RDAIngest.get_table","text":"get_table(db::SQLite.DB, table::String)::AbstractDataFrame\n\nRetrieve table table as a DataFrame from db\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_valuetype-Tuple{ODBC.Connection, Integer}","page":"Functions","title":"RDAIngest.get_valuetype","text":"get_valuetype(db::ODBC.Connection, variable_id::Integer)\n\nGet the data type of a variable\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_variable-Tuple{ODBC.Connection, Any, Any}","page":"Functions","title":"RDAIngest.get_variable","text":"get_variable(db::DBInterface.Connection, domain, name)\n\nReturns the variable_id of variable named name in domain with id domain\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_variable-Tuple{SQLite.DB, Any, Any}","page":"Functions","title":"RDAIngest.get_variable","text":"get_variable(db::SQLite.DB, domain, name)\n\nReturns the variable_id of variable named name in domain with id domain\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.get_vocabulary-Tuple{Any, Any}","page":"Functions","title":"RDAIngest.get_vocabulary","text":"get_vocabulary(variable, l)::Vocabulary\n\nGet a vocabulary, name of vocabulary in line 1 of l, vocabulary items (code and description) in subsequent lines, comma-separated\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.ingest_data-Tuple{Ingest, String, String, String}","page":"Functions","title":"RDAIngest.ingest_data","text":"ingest_data(ingest::Ingest, dbpath::String, dbname::String, datapath::String,\ntransformation_id::Integer, ingestion_id::Integer, death_ingestion_id=nothing)\n\nStep 4:  Import datasets, and link datasets to deaths\n\nIngestion_id can be from step 3 outputs if ingesting both death and datasets at the same time, if missing an ingestion will be created.\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.ingest_deaths-Tuple{Ingest, String, String, String}","page":"Functions","title":"RDAIngest.ingest_deaths","text":"ingest_deaths(ingest::Ingest, dbpath::String, dbname::String, datapath::String; sqlite=true)\n\nStep 3:  Ingest deaths to deathrows, return transformationid and ingestionid\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.ingest_dictionary-Tuple{AbstractSource, Vararg{String, 4}}","page":"Functions","title":"RDAIngest.ingest_dictionary","text":"ingest_dictionary(source::AbstractSource, dbpath::String, dbname::String, dictionarypath::String, datapath::String; sqlite=true)\n\nStep 2:  Ingest data dictionaries, add variables and vocabularies\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.ingest_source-Tuple{AbstractSource, String, String, String}","page":"Functions","title":"RDAIngest.ingest_source","text":"ingest_source(source::AbstractSource, dbpath::String, dbname::String,\ndatapath::String; sqlite=true)\n\nStep 1:  Ingest macro data of sources: sites, instruments, protocols, ethics, vocabularies \n\ndatapath: root folder with data from all sources [DATAINGESTPATH]\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.ingest_tac_vocabulary-Tuple{AbstractSource, Any, Any}","page":"Functions","title":"RDAIngest.ingest_tac_vocabulary","text":"ingest_tac_vocabulary(source::AbstractSource, db, datapath)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.initstatuses-Tuple{}","page":"Functions","title":"RDAIngest.initstatuses","text":"initstatuses()\n\nDefault transformation statuses\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.inittypes-Tuple{}","page":"Functions","title":"RDAIngest.inittypes","text":"inittypes()\n\nDefault transformation types\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.initvalue_types-Tuple{}","page":"Functions","title":"RDAIngest.initvalue_types","text":"initvalue_types()\n\nAdd default value types\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.insertdata-Tuple{DBInterface.Connection, Any, Any, Any}","page":"Functions","title":"RDAIngest.insertdata","text":"insertdata(db::DBInterface.Connection, table, columns, values)\n\nInsert a set of values into a table, columns list the names of the columns to insert, and values the values to insert\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.insertwithidentity-Tuple{ODBC.Connection, Vararg{Any, 4}}","page":"Functions","title":"RDAIngest.insertwithidentity","text":"insertwithidentity(db::ODBC.Connection, table, columns, values, keycol)\n\nInsert a record, returning the identity column value\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.insertwithidentity-Tuple{SQLite.DB, Vararg{Any, 4}}","page":"Functions","title":"RDAIngest.insertwithidentity","text":"insertwithidentity(db::SQLite.DB, table, columns, values, keycol)\n\nInsert a record, returning the identity column value\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.lines-Tuple{Any}","page":"Functions","title":"RDAIngest.lines","text":"lines(str)\n\nReturns an array of lines in str \n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.link_deathrows-Tuple{ODBC.Connection, Any, Any, Any}","page":"Functions","title":"RDAIngest.link_deathrows","text":"link_deathrows(db::ODBC.Connection, ingestion_id, dataset_id, death_identifier)\n\nInsert records into deathrows table to link dataset dataset_id to deaths table. Limited to a specific ingest. death_identifier is the variable in the dataset that corresponds to the external_id of the death.\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.link_deathrows-Tuple{SQLite.DB, Any, Any, Any}","page":"Functions","title":"RDAIngest.link_deathrows","text":"link_deathrows(db::SQLite.DB, ingestion_id, dataset_id, death_identifier)\n\nInsert records into deathrows table to link dataset dataset_id to deaths table. Limited to a specific ingest. death_identifier is the variable in the dataset that corresponds to the external_id of the death.\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.link_instruments-Tuple{DBInterface.Connection, String, String}","page":"Functions","title":"RDAIngest.link_instruments","text":"link_instruments(db::SQLite.DB, instrument_name, dataset_name)\n\nInsert records into instrument_datasets table, linking datasets with instruments.\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.lookup_variables-Tuple{Any, Any, Any}","page":"Functions","title":"RDAIngest.lookup_variables","text":"lookup_variables(db, variable_names, domain)\n\nReturns a DataFrame with dataset variable names and ids\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.makeodbcparam-Tuple{Any}","page":"Functions","title":"RDAIngest.makeodbcparam","text":"makeodbcparam(s)\n\nODBC parameters are ? only instead of @name\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.makeparam-Tuple{Any}","page":"Functions","title":"RDAIngest.makeparam","text":"makeparam(s)\n\nPrepend an @ to the column name to make it a parameter\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.opendatabase-Tuple{String, String}","page":"Functions","title":"RDAIngest.opendatabase","text":"opendatabase(path::String, name::String; sqlite = true)::DBInterface.Connection\n\nIf sqlite = true (default) open file on path as an SQLite database (assume .sqlite extension) else open database 'name' on server 'path' (assume SQL Server database)\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.opensqlitedatabase-Tuple{String, String}","page":"Functions","title":"RDAIngest.opensqlitedatabase","text":"opensqlitedatabase(path::String, name::String)::DBInterface.Connection\n\nOpen file on path as an SQLite database (assume .sqlite extension)\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.opensqlserverdatabase-Tuple{String, String}","page":"Functions","title":"RDAIngest.opensqlserverdatabase","text":"opensqlserverdatabase(server::String, name::String)::DBInterface.Connection\n\nOpen database 'name' on server 'server' (assume SQL Server database)\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.prepareinsertstatement-Tuple{ODBC.Connection, Any, Any}","page":"Functions","title":"RDAIngest.prepareinsertstatement","text":"prepareinsertstatement(db::ODBC.Connection, table, columns)\n\nPrepare an insert statement for SQL Server into table for columns\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.prepareinsertstatement-Tuple{SQLite.DB, Any, Any}","page":"Functions","title":"RDAIngest.prepareinsertstatement","text":"prepareinsertstatement(db::SQLite.DB, table, columns)\n\nPrepare an insert statement for SQLite into table for columns\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.prepareselectstatement-Tuple{ODBC.Connection, Any, Vector{String}, Vector{String}}","page":"Functions","title":"RDAIngest.prepareselectstatement","text":"prepareselectstatement(db::SQLite.DB, table, columns::Vector{String}, filter::Vector{String})\n\nReturn a statement to select columns from a table, with 0 to n columns to filter on\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.prepareselectstatement-Tuple{SQLite.DB, Any, Vector{String}, Vector{String}}","page":"Functions","title":"RDAIngest.prepareselectstatement","text":"prepareselectstatement(db::SQLite.DB, table, columns::Vector{String}, filter::Vector{String})\n\nReturn a statement to select columns from a table, with 0 to n columns to filter on\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.read_data-Tuple{RDAIngest.DocPDF}","page":"Functions","title":"RDAIngest.read_data","text":"read_data(datadoc)\n\nRead file names and formatting parameters, returns a DataFrame with the data\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.read_sitedata-Tuple{AbstractSource, Any, Any}","page":"Functions","title":"RDAIngest.read_sitedata","text":"read_sitedata(source::AbstractSource, datapath, sourceid)\n\nData are aggregated by site_col in order to identify unique sites\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.read_variables-Tuple{AbstractSource, String, String}","page":"Functions","title":"RDAIngest.read_variables","text":"read_variables(source::AbstractSource, dictionarypath::String, dictionaryname::String)\n\nRead a csv file listing variables, variable descriptions and data types in a dataset.\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.save_dataset-Tuple{DBInterface.Connection, DataFrames.AbstractDataFrame, String, String, Integer, Integer, Integer}","page":"Functions","title":"RDAIngest.save_dataset","text":"save_dataset(db::DBInterface.Connection, dataset::AbstractDataFrame, name::String, description::String,\ndomain_id::Integer, transformation_id::Integer, ingestion_id::Integer)::Integer\n\nInsert dataframe containing dataset into RDA database and returns the dataset_id\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.savedataframe-Tuple{ODBC.Connection, DataFrames.AbstractDataFrame, Any}","page":"Functions","title":"RDAIngest.savedataframe","text":"savedataframe(con::DBInterface.Connection, df::AbstractDataFrame, table)\n\nSave a DataFrame to a database table, the names of the dataframe columns should be identical to the table column names in the database\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.savedataframe-Tuple{SQLite.DB, DataFrames.AbstractDataFrame, Any}","page":"Functions","title":"RDAIngest.savedataframe","text":"savedataframe(con::SQLite.DB, df::AbstractDataFrame, table)\n\nSave a DataFrame to a database table, the names of the dataframe columns should be identical to the table column names in the database\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.selectdataframe-Tuple{ODBC.Connection, String, Vector{String}, Vector{String}, Union{Tuple, AbstractDict, NamedTuple, AbstractVector}}","page":"Functions","title":"RDAIngest.selectdataframe","text":"selectdataframe(db::ODBC.Connection, table::String, columns::Vector{String}, filter::Vector{String}, filtervalues::DBInterface.StatementParams)::AbstractDataFrame\n\nReturn a dataframe from a table, with 0 to n columns to filter on\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.selectdataframe-Tuple{SQLite.DB, String, Vector{String}, Vector{String}, Union{Tuple, AbstractDict, NamedTuple, AbstractVector}}","page":"Functions","title":"RDAIngest.selectdataframe","text":"selectdataframe(db::SQLite.DB, table::String, columns::Vector{String}, filter::Vector{String}, filtervalues::DBInterface.StatementParams)::AbstractDataFrame\n\nReturn a dataframe from a table, with 0 to n columns to filter on\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.selectsourcesites-Tuple{ODBC.Connection, AbstractSource}","page":"Functions","title":"RDAIngest.selectsourcesites","text":"selectsourcesites(db::ODBC.Connection, source::AbstractSource)\n\nReturns a dataframe with the sites associated with a source\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.selectsourcesites-Tuple{SQLite.DB, AbstractSource}","page":"Functions","title":"RDAIngest.selectsourcesites","text":"selectsourcesites(db, source::AbstractSource)\n\nReturns a dataframe with the sites associated with a source\n\n\n\n\n\n","category":"method"},{"location":"#RDAIngest.updatevariable_vocabulary-Tuple{DBInterface.Connection, Any, Any, Any}","page":"Functions","title":"RDAIngest.updatevariable_vocabulary","text":"updatevariable_vocabulary(db::DBInterface.Connection, name, domain_id, vocabulary_id)\n\nUpdate variable vocabulary\n\n\n\n\n\n","category":"method"}]
}

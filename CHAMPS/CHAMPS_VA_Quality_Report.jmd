<!--
title : CHAMPS Verbal Autopsy Data Quality Check [Part 1]
author : Young
date: Aug 31 2023
-->

# **CHAMPS Verbal Autopsy Data Quality Assessment Report**
###### **Yoonyoung Choi**
###### **Institute of Population Research, The Ohio State University**
###### **Aug 31 2023**

\
\

This report presents a data quality assessment of the dataset "CHAMPS Deidentified Verbal Autopsy Results." The objective is to identify and discuss data quality issues that may impact further data processing and analysis. This document is created using *Julia markdown* and is based on the **RDA database**[ver.Aug 2023].

\

<!-- NOT appeared this setup dependencies and datasetup -->
 ### **Set up the dataset**
```julia; echo=false; results="hidden"
using CSV
using DataFrames
using Pkg
using Dates
"FreqTables" ∉ keys(Pkg.project().dependencies) && Pkg.add("FreqTables")
"StatsBase" ∉ keys(Pkg.project().dependencies) && Pkg.add("StatsBase")
using FreqTables
using StatsBase
```
```julia; echo=false
filename = "champs_vd"
path = "/Users/young/Documents/GitHub/RDAIngest.jl/"
file = joinpath(path, "$filename.csv")
champs_raw = CSV.File(file; delim=',', quotechar='"', dateformat="yyyy-mm-dd", decimal='.') |> DataFrame
```
\
\

### **Dataset overview**

#### Data Size
```julia 
size(champs_raw)
```

#### Data types 
```julia ; echo=false
column_types = Dict{Symbol, Type}()
for col in names(champs_raw)
    column_types[Symbol(col)] = eltype(champs_raw[!, col])
end

type_counts = Dict{Type, Int}()
for col_type in values(column_types)
    type_counts[col_type] = get(type_counts, col_type, 0) + 1
end

println("Summary of variable types:")
for (col_type, count) in type_counts
    println("$col_type: $count variables")
end
```
\
\

### **Exploring Key Variables**

#### 1) Cross-check the key variables between VA and basic demographics data

##### a. Age group
- VA data
```julia
freqtable(champs_raw, :"age_group_va")
```

- Demo data
```julia
freqtable(champs_raw, :"age_group_demo")
```

The age groups within the VA data appear to be significantly off from the basic demographics data, which suggests a potential lack of comprehensiveness.

\

##### b. Date of Birth

- VA data 
Distribution of year of birth
```julia; echo=false
# Create the "year_of_birth" variable (including missing) to check year distribution
champs_raw.year_Id10021 = [ismissing(date) ? missing : year(date) for date in champs_raw.Id10021]
# Distribution of year of birth
freqtable(champs_raw, :"year_Id10021")
```
```julia
# Missing patterns by sites (site_iso_code)
freqtable(champs_raw, :"year_Id10021" , :"site_iso_code")
```

- Demo data 
Distribution of year of birth
```julia; echo=false
# Create the "year_of_birth" variable (including missing) to check year distribution
champs_raw.year_of_birth = [ismissing(date) ? missing : year(date) for date in champs_raw.date_of_birth]
# Distribution of year of birth 
freqtable(champs_raw, :"year_of_birth")
```
```julia
# Missing patterns by sites (site_iso_code)
freqtable(champs_raw, :"year_of_birth" , :"site_iso_code")
```
Need to double-check the coding for the years 1899, 1900, and those beyond 2022 in the VA data.

\

##### c. Date of Death
- VA data 
Distribution of year of death
```julia; echo=false
# Create the "year_of_death" variable (including missing) to check year distribution
champs_raw.year_Id10023 = [ismissing(date) ? missing : year(date) for date in champs_raw.Id10023]
# Distribution of year of death
freqtable(champs_raw, :"year_Id10023")
```
```julia
# Missing patterns by sites (site_iso_code)
freqtable(champs_raw, :"year_Id10023" , :"site_iso_code")
```

- Demo data 
Distribution of year of death
```julia; echo=false
# Create the "year_of_death" variable (including missing) to check year distribution
champs_raw.year_of_death = [ismissing(date) ? missing : year(date) for date in champs_raw.date_of_death]
# Distribution of year of death
freqtable(champs_raw, :"year_of_death")
```
```julia
# Missing patterns by sites (site_iso_code)
freqtable(champs_raw, :"year_of_death" , :"site_iso_code")
```
There are not any missing patterns across sites. Inquiry about how they coded the birth and death dates in the VA data.
Basic Demographics data seems much valid on these information.

\

##### d. Age days/months/years
- VA data
```julia
describe(champs_raw[!, :ageInDays])
describe(champs_raw[!, :ageInMonths])
describe(champs_raw[!, :ageInYears2])
describe(champs_raw[!, :ageInYearsRemain])
```
- Demo data
```julia
describe(champs_raw[!, :age_days])
describe(champs_raw[!, :age_months])
describe(champs_raw[!, :age_years])
```
\

##### e. Sanity check for calculation of age in days

- VA data
```julia; echo=false
champs_raw.ageindays_va_check = [ismissing(id21) || ismissing(id23) ? missing : Int(Dates.value(id23) - Dates.value(id21)) for (id21, id23) in zip(champs_raw.Id10021, champs_raw.Id10023)]
describe(champs_raw[!, :ageindays_va_check]) # does't make sense 
```

- Demo data
```julia; echo=false
champs_raw.ageindays_dm_check = [ismissing(id21) || ismissing(id23) ? missing : Int(Dates.value(id23) - Dates.value(id21)) for (id21, id23) in zip(champs_raw.date_of_birth, champs_raw.date_of_death)]
describe(champs_raw[!, :ageindays_dm_check]) # hmm
```
When I calculate ages with the difference between the date of death and the date of birth using a simple formula, it doesn't align with the information in the VA data. This is also causing discrepancies when compared to the demographics data. It's important to understand how they handle missing age values and perform these calculations accurately.

\

##### f. Other age-based generated variables 

- VA data
```julia
freqtable(champs_raw, :"isAdult")
```
```julia
freqtable(champs_raw, :"isChild")
```
```julia
freqtable(champs_raw, :"isNeonatal")
```
Seemingly, no valid information on age-based generated variables in VA data.

- A big question of whether the demographic information from the "basic_demographics" dataset is anticipated to align with that in the VA data? Furthermore, is it feasible to consider utilizing the demographic data for these key (age) variables? (still need detailed coding information.)
\


#### 2) Mis-matched data types 

##### a. Need coding instructions for some numeric type of variables
- Id10106: How many minutes after birth did the baby first cry?
```julia
freqtable(champs_raw, :"Id10106")
```
- Id10108: How many hours before death did the baby stop crying?
```julia
freqtable(champs_raw, :"Id10108")
```
- Other examples with same issues
```julia
freqtable(champs_raw, :"Id10367")
freqtable(champs_raw, :"Id10285")
freqtable(champs_raw, :"Id10382")
freqtable(champs_raw, :"Id10394")
freqtable(champs_raw, :"Id10162")
freqtable(champs_raw, :"Id10202")
```

How can we convert text or range values into numerical values? Additionally, should we consider 98, 99, and 9999 as missing values?

\

##### b. Different types in coding 

- Id10024: Please indicate the year of death.
```julia
freqtable(champs_raw, :"Id10024") 
```
```julia
# Create the "year_of_death" variable (including missing) to check year distribution
champs_raw.year_Id10024 = [ismissing(date) ? missing : year(date) for date in champs_raw.Id10024]
# Distribution of year of death
freqtable(champs_raw, :"year_Id10024")
```
The variable "year of death" should ideally be coded as a year, but it seems to have been recorded as a full date. Similarly, there are numerous missing entries.

\

##### c. What to do with the decimal points

- Id10248: For how many days did (s)he have puffiness of the face?
```julia
freqtable(champs_raw, :"Id10248")
```

- Other examples with same issues (# of days variables)
```julia
freqtable(champs_raw, :"Id10197")
freqtable(champs_raw, :"Id10250")
freqtable(champs_raw, :"Id10262")
```
Is there a specific method for assigning decimal points when dealing with days, or is it a flexible matter based on calculation? 
Additionally, do we address code "unknown" values as missing?

\

#### 3) Invalid measures or answers 

- Id10059: What was her/his marital status?
```julia
freqtable(champs_raw, :"Id10059")
```
Need to clarify the value "Child," and also confirm if it's a valid question or not.

- Id10212: Did (s)he have mental confusion?
```julia
freqtable(champs_raw, :"Id10212")
```

- Id10213: For how many months did (s)he have mental confusion? Calculated as: if(${Id10213_units}='days', ${Id10213_a} div 30,${Id10213_b})
```julia
freqtable(champs_raw, :"Id10213")
```

If the higher-level question (looping) is missing for these 0 values, how to address this?

- Other examples with same issues
```julia
freqtable(champs_raw, :"Id10178")
freqtable(champs_raw, :"Id10303")
freqtable(champs_raw, :"Id10309")
freqtable(champs_raw, :"Id10332")
freqtable(champs_raw, :"Id10415")
```

\

#### 4) Inconsistent coding in answers 

##### a. Dk/Ref answers
- Id10203: How rapidly did (s)he develop the protruding belly (abdomen)?
```julia
freqtable(champs_raw, :"Id10203")
```
Does "ref" refer to the same concept as "dk" (don't know)?

\

##### b. Unstandardized answers

- Id10004: Did s(he) die during the wet season? 
```julia
freqtable(champs_raw, :"Id10004")
```
Need to extract the initial word for the sake of consistency.

- Id10052: What was her/his citizenship/nationality?
```julia
freqtable(champs_raw, :"Id10052")
freqtable(champs_raw, :"Id10260")
freqtable(champs_raw, :"Id10360")
```
For multiple words, an underscore is required to be placed in between for proper formatting.

- Id10077:  Did (s)he suffer from any injury or accident that led to her/his death? 
```julia
freqtable(champs_raw, :"Id10077")
```
A common pattern observed is that many Yes/No answers are presented in mixed lower/upper cases.
Need to lowercase letters for all the strings.

- List of Y/N variables needs to be addressed (221 variables)
```julia; echo=false
# Function to get column names with "yes" or "no" values
function filter_yes_no_columns(df::DataFrame)
    selected_cols = String[]
    for col in names(df)
        col_values = df[!, col]
        has_yes_no_values = false
        for val in col_values
            if !ismissing(val) && (val == "yes" || val == "no")
                has_yes_no_values = true
                break
            end
        end
        if has_yes_no_values
            push!(selected_cols, col)
        end
    end
    return selected_cols
end

# Get column names with "yes" or "no" values
yes_no_columns = filter_yes_no_columns(champs_raw)

println(yes_no_columns)
## 221 variables 
```
\

#### 5) Uncertain missing value ranges

- Id10148: How many days did the fever last?
```julia
describe(champs_raw[!,:Id10148])
freqtable(champs_raw, :"Id10148")
```
- Id10201: For how many days did (s)he have a more than usually protruding belly (abdomen)?
```julia
describe(champs_raw[!,:Id10201])
freqtable(champs_raw, :"Id10201")
```
Is the value 999, which appears to be an outlier, considered a valid data entry or a code indicating missing information?

\

#### 6) More than two answers coding 
- Id10235: Where was the rash?
```julia
freqtable(champs_raw, :"Id10235")
```
We should determine the approach for coding this situation.

\

#### 7) Formatting issues with time variables

- Examples from **Id10011[Time at start of interview]** for different lengths are as follows:
```julia ; echo=false
# Extract the "Id10011" column
id10011_column = champs_raw[!, :Id10011]
# Count the number of missing values
id11_missing = count(ismissing, id10011_column)

# Get non-missing values
non_missing_values = id10011_column[.!ismissing.(id10011_column)]
# Create a dictionary to store examples by length
examples_by_length = Dict{Int, String}()

# Iterate through non-missing values
for value in non_missing_values
    length_value = length(value)
    if !haskey(examples_by_length, length_value)
        examples_by_length[length_value] = value
    end
end

# Print example values for different lengths
println("Example values from Id10011:")
for (length, example) in examples_by_length
    println("Length $length: $example")
end
```
Time variables demonstrate inconsistencies in format. The variable *Id10011* presents challenges with its format and content. 

\


### **Additional Discussion Points**

Regarding the interpretation of tac multi-target codes, we should address the following questions:

1. How are these codes generated?
2. What distinguishes between codes that are considered invalid versus those that are categorized as indeterminate?
3. If both lab and tac pertain exclusively to non-tissue specimens, could you clarify the location of results for tissue specimens?

\
\

### **Conclusion**
This data quality report offers a thorough understanding of the CHAMPS VA dataset's attributes and potential challenges. To proceed, clarification is needed on certain aspects, along with more detailed documentation of the coding process. This report lays the groundwork for subsequent data cleaning and analysis, with the resolution of these quality concerns being pivotal for attaining precise and dependable results.